Two Sum

Given an array of integers nums and an integer target, return indices 
of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, 
and you may not use the same element twice.
You can return the answer in any order. 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:

    2 <= nums.length <= 104
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    Only one valid answer exists.








Answer
-- The straight forward approach is to do 2 loops with the inner loop
being + 1 of the outer loop start value. That way we dont recheck values
that have already been compared.

the other solution is to do target - value and check if that difference exist.
This would require hashing the values for a quick lookup. This is only
reasonable if you expect large arrays of values. Because otherwise you
are allocating a large hash just to perform the operation.

-- after reading through the solutions. I saww an alternative where
you grow a hash as you loop, instead of hashing and checking at the start.
I suppose that avoids big memory jumps if the solution is at the front.

I suppose that writting two loops is rather boring, so I will do the 
hash solution. But I wont worry about safety.

-- C# went from 23ms to 3ms for the hash version. mem stayed about the same so
looks worth it.